Reference : 
	https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/
	https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/


    -  sudo apt upgrade 
    -  sudo apt -y upgrade
-------------------------------------------------------------------------------------------	
- when an installation command is executed
	eg. apt-get install <package_name> 
		Package Management System looks inside 
			/etc/apt/sources.list and 
			/etc/apt/sources.list.d/ 
				for the remote repository link
		searches for the desired application to be downloaded.	
	
    -  sudo apt update
    -  sudo apt -y install curl apt-transport-https
    -  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
    -  echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
-------------------------------------------------------------------------------------------    
	
	-  sudo apt update
    -  sudo apt -y install vim git curl wget kubelet kubeadm kubectl
	-  sudo apt-mark hold kubelet kubeadm kubectl
    -  kubectl version --client && kubeadm version
-------------------------------------------------------------------------------------------

Why disable swapping
https://support.f5.com/csp/article/K82655201#
https://serverfault.com/questions/881517/why-disable-swap-on-kubernetes
https://discuss.kubernetes.io/t/swap-off-why-is-it-necessary/6879/3

As an orchestration tool
	Kubernetes operates on the design principle that 
		deployments should maximum (~100 percent) of resources as possible
			maintain efficiency. 
	The Kubernetes scheduler 
		determines the best available node on which to deploy newly created pods. 
		If memory swapping is allowed to occur on a host system, 
			this can lead to performance and stability issues within Kubernetes. 
	For this reason, Kubernetes requires that you disable swap in the host system.

#Permanent disable
    -  sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab
#temporary disable	
	-  sudo swapoff -a
-------------------------------------------------------------------------------------------

https://techcommunity.microsoft.com/t5/networking-blog/introducing-kubernetes-overlay-networking-for-windows/ba-p/363082
    -  sudo modprobe overlay
https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/#letting-iptables-see-bridged-traffic
    -  sudo modprobe br_netfilter
-------------------------------------------------------------------------------------------


Why ip6tables = 1
This is a requirement for Container Network Interface (CNI) plug-ins to work.
https://www.ibm.com/docs/en/fci/1.0.2?topic=SSCKRH_1.0.2/platform/r_software_requirements_fci_kubernetes.html
https://kubernetes.io/docs/concepts/extend-kubernetes/compute-storage-net/network-plugins/#network-plugin-requirements
	- 
sudo tee /etc/sysctl.d/kubernetes.conf<<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF
-------------------------------------------------------------------------------------------

sysctl is used to modify kernel parameters at runtime

	- sudo sysctl --system
-------------------------------------------------------------------------------------------
Docker installation
    -  curl -fsSL https://get.docker.com -o get-docker.sh
    -  sudo sh get-docker.sh
    -  systemctl start docker
    -  systemctl enable docker
    -  systemctl status docker

    
	-  sudo mkdir -p /etc/systemd/system/docker.service.d
	-
sudo tee /etc/docker/daemon.json <<EOF
{
	"exec-opts": ["native.cgroupdriver=systemd"],
	"log-driver": "json-file",
	"log-opts": {
		"max-size": "100m"
	},
"storage-driver": "overlay2"
}
EOF

	- sudo systemctl daemon-reload
    - sudo systemctl restart docker
	- sudo systemctl enable docker

	- lsmod | grep br_netfilter
-------------------------------------------------------------------------------------------
	- sudo systemctl enable kubelet
    - sudo kubeadm config images pull
-------------------------------------------------------------------------------------------
	- sudo vim /etc/hosts
		<ip> <hostname>
		
	-	ping hostname
-------------------------------------------------------------------------------------------	

Only on Master Node	
   - sudo kubeadm init --upload-certs
-------------------------------------------------------------------------------------------   
    -  exit
    -  mkdir -p $HOME/.kube
    -  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
    -  sudo chown $(id -u):$(id -g) $HOME/.kube/config
    -  kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
    -  kubectl get nodes
-------------------------------------------------------------------------------------------   
   
On Worker Node
	- sudo kubeadm join command
-------------------------------------------------------------------------------------------	