Reference: Influenced by
	1. https://github.com/connectbaseer/vagrant-centos-k8s-ha-cluster
	2. https://www.youtube.com/watch?v=cDXPD1GA8AA

hostnamectl set-hostname k8s-m1 --static

k8s-lb  <ip>
k8s-m1	172.31.82.35
k8s-m2	172.31.88.52
k8s-w1	172.31.91.107
k8s-w2	172.31.93.188

Do the installation as documented in the below url till init. This should be done on master and worker nodes.
	https://computingforgeeks.com/deploy-kubernetes-cluster-on-ubuntu-with-kubeadm/
	https://computingforgeeks.com/install-kubernetes-cluster-on-centos-with-kubeadm/
	

On the lb node

sudo su
yum update -y
yum install epel-release
yum install nginx-mod-stream

SELINUX=disabled in the cat /etc/selinux/config and reboot the server

sudo systemctl restart nginx


Nginx configuration.
--------------------	
Create directory for loadbalancing config.
	mkdir -p /etc/nginx/tcp.conf.d/

vi /etc/nginx/nginx.conf - and add below lines to the end.
	# including directory for tcp load balancing
	include /etc/nginx/tcp.conf.d/*.conf;

create config for api-server loadbalancing
vi /etc/nginx/tcp.conf.d/apiserver.conf

stream {
        upstream apiserver_read {
             server 172.31.89.190:6443;                     #--> control plane node 1 ip and kube-api port
             server 172.31.88.52:6443;                     #--> control plane node 2 ip and kube-api port
        }
        server {
                listen 6443;                               # --> port on which load balancer will listen
                proxy_pass apiserver_read;
        }
}
e.g. 
stream {
        upstream apiserver_read {
             server 172.31.89.190:6443;
			 server 172.31.88.52:6443;
  	    }
        server {
                listen 6443;
                proxy_pass apiserver_read;
        }
}

Reload the config
nginx -s reload


Test the proxy
yum install nc -y
	nc -v LOAD_BALANCER_IP PORT
	nc -v k8s-lb 6443
	
	A connection refused error is expected because the apiserver is not yet running. A timeout, however, means the load balancer cannot communicate with the control plane node



Back to kubernetes installation
-------------------------------
1. sudo kubeadm init --control-plane-endpoint "LOAD_BALANCER_DNS:LOAD_BALANCER_PORT" --upload-certs
You can use the --kubernetes-version flag to set the Kubernetes version to use. It is recommended that the versions of kubeadm, kubelet, kubectl and Kubernetes match.
The --control-plane-endpoint flag should be set to the address or DNS and port of the load balancer.
The --upload-certs flag is used to upload the certificates that should be shared across all the control-plane instances to the cluster. If instead, you prefer to copy certs across control-plane nodes manually or using automation tools, please remove this flag and refer to Manual certificate distribution section below
Some CNI network plugins require additional configuration, for example specifying the pod IP CIDR, while others do not. See the CNI network documentation. To add a pod CIDR pass the flag --pod-network-cidr, or if you are using a kubeadm configuration file set the podSubnet field under the networking object of ClusterConfiguration

e.g. 
	sudo kubeadm init --control-plane-endpoint "k8s-lb:6443" --upload-certs --pod-network-cidr 10.244.0.0/16 --apiserver-advertise-address=192.168.30.5
	apiserver-advertise-address is required only in vagrant world.


2. - kubectl config

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config
  
  
3. kubeadm join
4. calico installation


 

Other references: 
https://serverfault.com/questions/858067/unknown-directive-stream-in-etc-nginx-nginx-conf86
