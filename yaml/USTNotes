

Cluster Management, 
Kubernetes management, 
  Kubernetes Management Tools, 


Draining Kubernetes nodes
	kubectl drain <node-name> [options]
	kubectl drain worker-node-2 --ignore-daemonsets
	
		The primary tool for draining a node is the kubectl drain command. 
	
	Respecting PodDisruptionBudgets (PDBs): 
		Kubernetes respects PodDisruptionBudgets, 
			define 
				minimum number of replicas of an application 
					that must be available during voluntary disruptions (like draining). 
			If draining the node would violate a PDB, 
				kubectl drain command will fail 
					unless you use the --force option (use with caution).
		terminationGracePeriodSeconds
			amount of time to shut down gracefully before forcibly terminating the container.
		kubectl drain waits for the Pods to be successfully terminated.
		
	
	
	
Cordon nodes 
	kubectl cordon <node-name>
		marks a specific node in your Kubernetes cluster as unschedulable.
	
Upgrading Kubernetes with KubeAdm, 
	https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/kubeadm-upgrade/
	
	
Backup and restoring etcd Cluster Data
	https://medium.com/@mehmetodai/backup-and-restore-etcd-cluster-on-kubernetes-93c19b1c070
	
Cluster management best practices
		I. Planning and Setup:

			Choose the Right Kubernetes Distribution: Select a distribution that aligns with your needs (e.g., managed services like EKS, GKE, AKS; self-managed with kubeadm; lightweight distributions like k3s or MicroK8s).
			
			Proper Network Design: 
				Plan your 
					VPC/network subnets, 
					IP address ranges, and 
					network policies carefully. 
					Ensure proper routing and isolation.
			Secure Control Plane:
				Restrict access to the control plane nodes.
				Enable RBAC (Role-Based Access Control) and follow the principle of least privilege.
				Secure 
					etcd with TLS encryption for both client and peer communication.
				Enable audit logging for the API server.
			Secure Worker Nodes:
				Harden the operating system of your worker nodes.
				Minimize the software installed on worker nodes.
				Implement node-level security measures.
				Use Strong Authentication and Authorization:
				Integrate with a secure identity provider (e.g., LDAP, OIDC).
				Implement robust RBAC policies to control access to Kubernetes resources based on roles and responsibilities.
				Regularly review and audit RBAC configurations.
			Resource Planning: 
				Accurately estimate the resource requirements (CPU, memory, storage) for your applications and provision your nodes accordingly. Consider future growth.
			Automation of Cluster Provisioning: 
				Use Infrastructure as Code (IaC) tools like Terraform, CloudFormation, or eksctl/gcloud container clusters create/az aks create to automate cluster creation and management, ensuring consistency and repeatability.
		II. Day-to-Day Operations:

			Health Monitoring and Alerting:
				Implement comprehensive monitoring for your control plane, worker nodes, and applications using tools like Prometheus, Grafana, Datadog, or cloud-native monitoring services.
				Set up meaningful alerts for critical metrics (e.g., CPU/memory usage, node status, application errors, API server latency).
			Log Aggregation and Analysis:
				Centralize logs from all components (control plane, kubelet, kube-proxy, application containers) using tools like Elasticsearch, Fluentd/Fluent Bit, and Kibana (EFK stack) or cloud logging services.
				Establish processes for analyzing logs to identify and troubleshoot issues.
			Regular Backups:
				Implement a robust backup strategy for your etcd data. This is critical for recovering from cluster failures.
				Consider backing up persistent volumes based on your data retention requirements.
			Software Updates and Patching:
				Keep your Kubernetes control plane and worker nodes up-to-date with the latest stable versions and security patches. Follow the Kubernetes release notes and security bulletins.
				Automate patching processes where possible, but carefully test updates in non-production environments first.
			Resource Management:
				Define resource requests and limits for your Pods to ensure fair resource allocation and prevent noisy neighbor issues.
				Utilize Horizontal Pod Autoscaling (HPA) to automatically adjust the number of Pod replicas based on metrics like CPU utilization or custom metrics.
				Consider Vertical Pod Autoscaling (VPA) to automatically adjust the CPU and memory requests and limits of your Pods (use with caution as it can cause Pod restarts).
				Monitor resource consumption at the node and Pod level to identify inefficiencies and optimize resource utilization.
			Network Management:
				Implement Network Policies to control network traffic between Pods and namespaces, enhancing security and isolation.
				Properly configure Ingress controllers for external access to your applications, including TLS termination and routing rules.
				Understand and manage Service DNS for internal service discovery.
				Storage Management:
				Utilize Persistent Volumes (PVs) and Persistent Volume Claims (PVCs) for stateful applications.
				Configure Storage Classes for dynamic provisioning of storage.
				Implement appropriate backup and recovery strategies for your persistent data.
				Secrets Management:
				Securely manage sensitive information like API keys, passwords, and certificates using Kubernetes Secrets.
				Consider using external secret management solutions like HashiCorp Vault, AWS Secrets Manager, or Azure Key Vault and integrating them with Kubernetes.
				Cost Optimization (Especially for Cloud-Managed Clusters):
				Right-size your worker nodes based on actual resource utilization.
				Utilize Spot Instances (with appropriate tolerations and strategies) for non-critical workloads to reduce costs.
				Implement scaling strategies to automatically scale down resources during off-peak hours.
				Regularly review your cloud provider's billing and identify potential cost savings.
		III. Security Best Practices (Ongoing):

			Regular Security Audits: 
				Conduct periodic security audits of your Kubernetes configurations, RBAC policies, network policies, and container images.
			Container Security:
				Scan container images for vulnerabilities during your CI/CD pipeline.
			Minimize the attack surface of your containers by including only necessary components.
				Run containers as non-root users.
			Use security contexts to define security-related settings for your Pods and containers.
			Network Security:
				Enforce the principle of least privilege for network access using Network Policies.
				Secure external access points (Ingress) with TLS and appropriate authentication mechanisms.
				Consider using a Web Application Firewall (WAF) in front of your Ingress controllers.
				Admission Controllers: Utilize admission controllers (e.g., AlwaysPullImages, PodSecurityAdmission, custom webhooks) to enforce security policies at the time of resource creation.
				Keep Credentials Secure: Avoid embedding sensitive credentials directly in manifests or container images. Use Kubernetes Secrets or external secret management solutions.
				Stay Informed About Security Vulnerabilities: Subscribe to security advisories for Kubernetes and your container runtime and promptly apply necessary patches.
		IV. Governance and Best Practices:

			Establish Clear Roles and Responsibilities: 
				Define who is responsible for different aspects of cluster management (e.g., security, networking, application deployments).
			Document Everything: 
				Maintain comprehensive documentation of your cluster configuration, deployment processes, troubleshooting steps, and security policies.
			Implement Change Management Processes: 
				Establish a controlled process for making changes to your cluster configuration and applications.
			Follow the Principle of Least Privilege: 
				Grant only the necessary permissions to users, service accounts, and applications.
			Regularly Review and Update Policies: 
				Kubernetes and the cloud-native ecosystem are constantly evolving. Regularly review and update your management policies and best practices.
			Disaster Recovery Planning: 
				Develop and test a disaster recovery plan for your Kubernetes cluster, including strategies for backups, restoring the control plane, and ensuring application availability in case of failures.
			Education and Training: 
				Ensure your team has the necessary knowledge and skills to manage the Kubernetes cluster effectively and securely.
		V. Specific Considerations for Your Location:

			Cloud Provider Region Selection: 
				If using a cloud provider, choose the AWS, Azure, or GCP region that offers the best latency and compliance for your users in India.
			Network Latency: 
				Be mindful of potential network latency if your users are geographically dispersed. Consider multi-region deployments if necessary.
			Compliance and Regulatory Requirements: 
				Ensure your cluster configuration and data management practices comply with any relevant local regulations in India.
			Local Support and Expertise: 
				Consider leveraging local Kubernetes communities and expertise for support and knowledge sharing.
Kubernetes Object Management, 
		Kubernetes object management refers to how you create, update, and delete the various resources (objects) that define and control your containerized applications and infrastructure within a Kubernetes cluster. These objects include Pods, Deployments, Services, Namespaces, ConfigMaps, Secrets, and many more.

		There are primarily two ways to manage Kubernetes objects:

		1. Imperative Object Management:

			How it works: You directly tell Kubernetes what action to take on specific, existing objects using kubectl commands. You operate on resources by their names.

			Focus: Action-oriented. You specify the verb (create, delete, scale, expose, run, etc.) and the object(s) it applies to.

			State Management: The desired state is often implicit in the sequence of commands you execute. Kubernetes doesn't inherently track the "desired end state" you're aiming for based solely on imperative commands.

			Examples:

			Creating a Pod:
			

			kubectl run my-nginx --image=nginx
			Scaling a Deployment:
			

			kubectl scale deployment my-app --replicas=3
			Deleting a Service:
			

			kubectl delete service my-service
			Exposing a Deployment:
			

			kubectl expose deployment my-app --port=80 --type=LoadBalancer --name=my-app-lb
			Pros:

			Simple and direct for quick, one-off tasks and exploration.
			Easy to understand for basic operations.
			Faster for immediate actions.
			Cons:

			Lack of version control and audit trails for configuration changes.
			Difficult to reproduce the exact state of your infrastructure.
			Not ideal for Infrastructure as Code (IaC) practices.
			Harder to automate complex configurations.
		2. Declarative Object Management:

			How it works: You define the desired state of your objects in YAML or JSON files (manifests). You then tell Kubernetes to make the current state match the desired state described in your file using the kubectl apply command.

			Focus: Desired state-oriented. You describe what you want your resources to look like.

			State Management: Kubernetes actively tracks the desired state defined in your manifest files. If the current state deviates, Kubernetes will attempt to reconcile it with the desired state.

		Example (deployment.yaml):

		YAML

		apiVersion: apps/v1
		kind: Deployment
		metadata:
		  name: my-app-deployment
		spec:
		  replicas: 3
		  selector:
			matchLabels:
			  app: my-app
		  template:
			metadata:
			  labels:
				app: my-app
			spec:
			  containers:
			  - name: my-container
				image: my-registry/my-app:v1.0
				ports:
				- containerPort: 8080
		Applying the manifest:

		

		kubectl apply -f deployment.yaml
		Updating the number of replicas (modifying the YAML and applying again):

		

		# Edit deployment.yaml and change replicas to 5
		kubectl apply -f deployment.yaml
		Pros:

		Infrastructure as Code (IaC): 
			Manifest files can be version-controlled (e.g., with Git).
		Reproducibility: 
			Easily recreate the exact state of your resources.
		Idempotency: 
			Applying the same manifest multiple times will not create duplicates or cause unintended side effects.
		Automation-friendly: 
			Ideal for CI/CD pipelines and automation scripts.
		Clear definition of the desired state.
		Cons:

		More verbose than simple imperative commands.
		Initial learning curve for understanding manifest structure.
		Comparison of Imperative and Declarative Management:

		Feature				Imperative (kubectl run, scale, delete, etc.)	Declarative (kubectl apply -f)
		Approach			Action-oriented (tell Kubernetes what to do)	Desired state-oriented (define what you want)
		State Tracking		Implicit, based on executed commands			Explicit, defined in manifest files
		Version Control		Difficult to track changes systematically		Easy to track changes with version control systems
		Reproducibility		Challenging										Straightforward
		Idempotency			Not inherently idempotent						Idempotent
		Automation			Can be cumbersome for complex setups			Well-suited for automation
		Complexity			Simpler for basic tasks							More initial overhead
		Best Practice		Good for exploration, quick actions				Recommended for production/long-term management

		Export to Sheets
		Other Important kubectl Commands for Object Management:

		kubectl get: Retrieves information about Kubernetes objects.
		kubectl describe: Shows detailed information about a specific object.
		kubectl edit: Allows you to directly edit the YAML or JSON definition of an existing object in your default editor. This is a hybrid approach, as you are directly manipulating the desired state.
		kubectl delete -f <manifest.yaml>: Deletes objects defined in a manifest file.
		kubectl replace -f <new_manifest.yaml> --force: Replaces an existing object with the definition in a new manifest file (use with caution as it can lead to downtime).
		kubectl diff -f <manifest.yaml>: Shows the differences between the desired state in a manifest file and the current state of the object in the cluster.
		kubectl apply --prune: Removes objects from the cluster that are no longer present in the set of manifests you are applying (requires proper labels and selectors).
		Best Practices for Kubernetes Object Management:

		Prefer Declarative Management: For production environments and managing infrastructure as code, declarative management using kubectl apply -f is highly recommended.
			Version Control Your Manifests: 
				Store your YAML/JSON manifest files in a version control system like Git.
			Follow the Principle of Least Privilege: 
				Apply manifests with the appropriate level of permissions.
			Use Namespaces for Organization: 
				Organize your resources into logical groups using namespaces.
			Use Labels and Selectors Effectively: 
				Labels are key-value pairs attached to objects, and selectors are used to target sets of objects based on their labels. Use them consistently for management and automation.
			Automate Deployments: 
				Integrate kubectl apply into your CI/CD pipelines for automated application deployments and updates.
		Review and Audit Changes: 
			Implement processes for reviewing and auditing changes made to your Kubernetes objects.




Managing Kubernetes Role Based Access Control, 
		
	Creating services accounts, 
		

	Pods and Container management, 
Introduction to Pods and Containers, 

Configuring applications with environment variables, 
Managing application configuration - 
	ConfigMaps, 
	Secrets, 
	Managing container resources, 
Monitoring container health with Probes, 

Init Containers, 
Multi-container Pods, 

Storage, 
Introduction to Kubernetes storage, 
Using volumes, 
Managing container storage with Kubernetes volumes, 
Persistent volumes and Persistent Volume Claims, 
Storage Class, 
Security, 
	TLS Introduction, 
	TLS in Kubernetes, 
Kubeconfig, 
RBAC, 
Cluster Roles and Role Bindings, 
Service Accounts, 
Image Security, 

Checking cluster node logs, 
Identification of fault in broken cluster, 
Application level troubleshooting, 
Checking container logs, 
Troubleshooting Kubernetes Networking issues, 
	
Others, 
	JSON Path, 
	Advanced Kubectl commands with JQ.	
		https://stackoverflow.com/questions/77886305/shorten-kubectl-jq-command
		https://medium.com/geekculture/my-jq-cheatsheet-34054df5b650