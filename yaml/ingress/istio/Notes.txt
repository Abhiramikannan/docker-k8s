https://www.youtube.com/watch?v=K73Q5bS4X6Y

Install istio
	https://istio.io/latest/docs/setup/getting-started/#download

	curl -L https://istio.io/downloadIstio | sh -
	cd istio-x.x.x
	Sample application in 
		cd samples/
	istioctl client binary in 
		cd bin/ 
	export PATH=$PWD/bin:$PATH
	istioctl install --set profile=demo -y
	
	kubectl get pods -n istio-system
	kubectl get svc -n istio-system
	kubectl label namespace default istio-injection=enabled
	

	https://istio.io/latest/docs/setup/install/istioctl/
	
	
	./istio

https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/





---------------------------
What is Istio?
	open-source service mesh solution 
	enhances 
		resilience, 
		security, 
		observability, and 
		control of microservices interactions. 
	sits between microservices to 
		handle communication in a 
			standardized way, 
			addressing common challenges in managing microservices 
				by abstracting the 
					networking layer, which 
						facilitates routing, 
						security policies, and 
						telemetry.

Key Concepts of Istio:
	Service Mesh: 
		A network layer 
			designed to handle 
				complexities of microservice interactions.
	Sidecar Proxy: 
		Istio deploys 
			sidecar container proxy (usually Envoy) 
			alongside each service instance to manage communication.
	Control Plane: 
		Istio’s control plane manages the service mesh, 
			configuring and 
			overseeing 
				traffic, 
				security, and 
				telemetry.

Core Components of Istio
Istio’s architecture consists of a data plane and a control plane:

Data Plane
	Envoy Sidecar Proxy: 
		Each microservice is paired with an Envoy sidecar proxy 
			that intercepts all network traffic to/from the service. 
			It provides:
				Load Balancing: 
					Distributes requests among service instances.
				Routing: 
					Directs traffic intelligently based on configurations.
				Metrics & Tracing: 
					Collects telemetry data for monitoring.
				Security: 
					Enforces mTLS (mutual Transport Layer Security) for secure communication.

Control Plane
The control plane manages configuration for the data plane. Its primary components include:

	Pilot: 
		Manages traffic routing rules, 
			distributing them to Envoy proxies, allowing control over service discovery, load balancing, and routing.
	Citadel: 
		Handles certificate management, 
		issue certificates for services to enable mutual TLS (mTLS) communication, 
			enforcing zero-trust security.
	Galley: 
		Validates and manages Istio configuration, 
			ensuring consistency across the mesh.
	Mixer (deprecated): 
		Previously handled telemetry data collection but has largely been replaced by Envoy.
	Key Istio Features
		Traffic Management: 
			Customizes 
				routing policies, 
				load balancing, and 
				retries. 
				Istio can manage traffic 
					for canary deployments, 
					blue-green deployments, and 
					A/B testing.
		Security: 
			Provides mTLS for 
				secure, 
				encrypted communication. 
			Istio’s fine-grained access control policies 
				regulate which services can communicate.
		Observability: 
			Collects telemetry data for 
				distributed tracing, 
				monitoring, and 
				logging using tools like 
					Prometheus, 
					Grafana, and 
					Jaeger.

How to Deploy Istio
	Here is a step-by-step approach to deploying Istio on a Kubernetes cluster.

--------------


What is Istio?

Traffic management: 
	Routing, 
	load balancing, 
	A/B testing, 
	canary deployments, and 
	fault injection.
Security: 
	Mutual TLS authentication, 
	authorization, and 
	encryption.
Observability: 
	Metrics, 
	logs, and 
	traces for monitoring and troubleshooting.
Istio as an Ingress Controller

Istio can act as an ingress controller, handling incoming traffic to your Kubernetes cluster. It uses a combination of components to achieve this:

Ingress Gateway:
	A dedicated service 
		exposes the mesh to the external world.
	Configured to listen on specific ports and protocols (HTTP, HTTPS, TCP, etc.).
	Receives incoming requests and 
		forwards them to appropriate destination services.
	VirtualService and DestinationRule:
	VirtualService 
		defines how traffic is routed to specific destinations 
			based on various criteria 
				(hostnames, paths, headers, etc.).
	DestinationRule 
		specifies traffic policies for a particular service, 
			including 
				load balancing, 
				circuit breaking, and 
				fault injection.
How Istio Handles Ingress Traffic

Request Reception:
	The Ingress Gateway receives incoming requests.
	Traffic Routing:
		Istio's control plane components (Pilot) 
			analyze the request and 
			determine the appropriate destination service 
				based on the 
					VirtualService and 
					DestinationRule configurations.
	Proxy Sidecar Injection:
		Istio injects a sidecar proxy (Envoy) into each application pod.
	Traffic Forwarding:
		The Ingress Gateway 
			forwards the request to one or more Envoy sidecars.
	Load Balancing and Routing:
		Envoy
			a high-performance proxy, 
			handles load balancing, 
			retries, 
			timeouts, 
			circuit breaking, and other 
			traffic management tasks.
Security Enforcement:
	Envoy enforces 
		security policies, 
		such as 
			mutual TLS, 
			authentication, and 
			authorization.
Request Delivery:
	The request is finally delivered to the target application pod.
HAProxy Integration

Istio leverages HAProxy as a high-performance load balancer and proxy. 
	HAProxy is integrated with Envoy to provide 
		advanced traffic management capabilities, including:

			Load Balancing: 
				Distributing traffic across multiple instances of a service.
			SSL Termination: 
				Decrypting HTTPS traffic and forwarding it to the backend service.
			HTTP/2 Support: 
				Optimizing network performance.
			Rate Limiting: 
				Controlling the rate of incoming requests.
Certificate Management

Istio supports certificate management through various mechanisms:

	Manual Configuration: 
		Providing certificates manually to the Ingress Gateway.
	Certificate Authority (CA): 
		Using a CA to issue and manage certificates for services within the mesh.
	Integration with External Certificate Authorities: 
		Leveraging external CAs like Let's Encrypt to obtain certificates.
Internal Routing Logic

Istio's internal routing logic relies heavily on Envoy's capabilities:

	xDS API: 
		Envoy communicates with the Istio control plane 
			using the xDS API to receive configuration updates.
	Listener Configuration: 
		Envoy creates listeners to 
			listen on specific 
				ports and 
				protocols.
	Filter Chains: 
		Envoy uses filter chains to 
			process incoming and 
			outgoing traffic.
	Routing and Load Balancing: 
		Envoy's routing and load balancing capabilities are 
			used to direct traffic to the 
			appropriate destination.
	Security Enforcement: 
		Envoy enforces security policies, 
			such as 
				mutual TLS and 
				authentication.
	Additional Considerations

		Kubernetes Network Policy: 
			Istio can integrate with Kubernetes Network Policy to further 
				control traffic flow within the cluster.
		Telemetry: 
			Istio provides detailed telemetry data, 
				including 
					metrics, 
					logs, and 
					traces, for 
					monitoring and troubleshooting.
		Security: 
			Istio offers robust security features, such as mutual TLS, authentication, and authorization, to protect your services.
By leveraging these components and mechanisms, Istio provides a powerful and flexible platform for managing and securing microservices in a Kubernetes environment.


https://istio.io/latest/docs/tasks/traffic-management/ingress/ingress-control/


------------------
Gateway

A Gateway in Istio 
	represents a load balancer 
	operating at the edge of the mesh. 
	receive incoming or outgoing HTTP/TCP connections. 

	Gateways define:   

		Listened Ports: 
			The specific ports on which the Gateway listens for incoming traffic.
		Protocols: 
			The supported protocols (HTTP, TCP, etc.).   
		TLS Configuration: 
			Whether TLS termination is required and the associated certificates.
		Security Policies: 
			Access control and authentication mechanisms.   

VirtualService

A VirtualService
	set of traffic routing rules for a given host. 
	It determines how incoming traffic is routed to specific destinations based on various criteria, such as:   

		Hostnames: The host header in the HTTP request.   
		HTTP Methods: The HTTP method (GET, POST, etc.).
		Headers: Specific header values in the request.
		Path Prefixes: The path of the requested URI.
Internal Traffic Routing

When a request arrives at a Gateway, Istio's control plane, specifically the 
	Pilot component, 
	takes over the routing process. 
	Here's how it works:

		Request Reception:
			The Gateway receives the incoming request.   
		Host Matching:
			Pilot matches the request's 
				host header with the hosts defined in 
					VirtualService configurations.
		Routing Rule Selection:
			Based on the host match and other matching criteria, 
				Pilot selects the 
					appropriate routing rule from the VirtualService.
		Destination Selection:
			The selected routing rule 
				specifies the destination service or 
					subset of services to which the traffic should be forwarded.   
		Traffic Forwarding:
			Pilot sends instructions to the sidecar proxies 
				associated with the destination service.
		Proxy-Based Routing:
			The sidecar proxies, 
				typically Envoy proxies, 
				receive the routing instructions and 
				forward the traffic to the appropriate backend services.   
Key Concepts in Istio Traffic Routing:

Sidecar Proxies: These proxies are injected into application pods and handle traffic routing, load balancing, security, and telemetry.   
xDS Protocol: Istio uses the xDS protocol to communicate configuration changes to sidecar proxies.   
Load Balancing: Istio supports various load balancing algorithms (round robin, random, weighted, etc.) to distribute traffic evenly.   
Circuit Breaking: Istio can automatically failover to healthy instances of a service in case of failures.   
Fault Injection: Istio allows you to simulate failures to test the resilience of your system.

   
-----------------

Here's how Istio handles this:

Pod IP Addresses:

Each pod in a Kubernetes cluster is assigned a unique IP address within the cluster's network.
This IP address is used for communication between pods.
Sidecar Proxy IP Addresses:

Sidecar proxies are often deployed as additional containers within the same pod as the application.
However, they typically have their own IP addresses, separate from the application pod's IP.
Network Configuration:

Istio's control plane, specifically Pilot, configures the network infrastructure (e.g., CNI plugins, network policies) to route traffic to the sidecar proxies.
This configuration ensures that traffic destined for a pod's IP address is intercepted by the sidecar proxy.
Proxy-Based Routing:

The sidecar proxy examines the incoming traffic and, based on the routing rules, forwards it to the appropriate destination sidecar proxy.
This forwarding occurs within the cluster's network and doesn't involve modifying the source IP address of the packet.
Key Points:

Transparent Proxy: The sidecar proxy operates transparently to the application. The application doesn't need to be aware of the proxy's existence.
Network Configuration: Istio leverages Kubernetes' network configuration mechanisms to ensure that traffic is routed to the correct sidecar proxies.
Cluster Networking: The underlying network infrastructure, often provided by a CNI plugin like Calico or Cilium, plays a crucial role in routing traffic within the cluster.

-----------------Here's how Istio handles this:

Pod IP Addresses:

Each pod in a Kubernetes cluster is assigned a unique IP address within the cluster's network.
This IP address is used for communication between pods.
Sidecar Proxy IP Addresses:

Sidecar proxies are often deployed as additional containers within the same pod as the application.
However, they typically have their own IP addresses, separate from the application pod's IP.
Network Configuration:

Istio's control plane, specifically Pilot, configures the network infrastructure (e.g., CNI plugins, network policies) to route traffic to the sidecar proxies.
This configuration ensures that traffic destined for a pod's IP address is intercepted by the sidecar proxy.
Proxy-Based Routing:

The sidecar proxy examines the incoming traffic and, based on the routing rules, forwards it to the appropriate destination sidecar proxy.
This forwarding occurs within the cluster's network and doesn't involve modifying the source IP address of the packet.
Key Points:

Transparent Proxy: The sidecar proxy operates transparently to the application. The application doesn't need to be aware of the proxy's existence.
Network Configuration: Istio leverages Kubernetes' network configuration mechanisms to ensure that traffic is routed to the correct sidecar proxies.
Cluster Networking: The underlying network infrastructure, often provided by a CNI plugin like Calico or Cilium, plays a crucial role in routing traffic within the cluster.


---------------
IPTables Rules: Istio often uses IPtables rules to redirect traffic destined for the pod's IP address to the sidecar proxy. This ensures that all incoming and outgoing traffic is intercepted by the proxy.
3. Transparent Proxying:

The sidecar proxy operates transparently to the application. The application doesn't need to be aware of the proxy's existence.
The proxy intercepts traffic, applies necessary transformations (e.g., adding headers, encryption), and forwards it to the application container or another service.

------------------
Istio's DNS proxying: Uses an automatically allocated address from the 240.240.0.0/16 reserved IP address range. 
Istio's headless services: Doesn't configure listeners for each Pod IP, but it does set up listeners for each IP:Port pair in the headless service.


Further read 
	https://istio.io/latest/docs/ops/configuration/traffic-management/traffic-routing/